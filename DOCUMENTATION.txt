Le projet CitationsWeb est une application Full-Stack asynchrone con√ßue pour :

R√©cup√©rer des donn√©es : Scraper des citations √† partir de sources web d√©finies (le Frontend transmet le sujet de recherche au Backend).

Stocker et suivre : G√©rer le statut du scraping en temps r√©el et stocker les donn√©es dans une base de donn√©es (probablement Supabase, d'apr√®s les imports supabase_client).

Pr√©senter les donn√©es : Offrir une interface utilisateur r√©active pour lancer, arr√™ter et visualiser le statut du processus.

Exporter les donn√©es : Permettre le t√©l√©chargement des citations collect√©es en formats JSON ou CSV.

üèõÔ∏è Architecture Technique
Le projet repose sur une architecture moderne de type "Client-Server" (ou API-Driven) :

Composant	Technologie Principale	R√¥le et Raison d'√™tre
Backend	Python (FastAPI) et Uvicorn	G√®re la logique m√©tier, les appels √† la base de donn√©es, et surtout l'op√©ration gourmande en I/O : le Scraping (via Playwright, implicitement). Raison : FastAPI est extr√™mement rapide et con√ßu pour l'asynchronisme (asyncio), ce qui est id√©al pour ne pas bloquer le serveur pendant les longues t√¢ches de scraping.
Frontend	Nuxt 3 (Vue 3)	Fournit l'interface utilisateur. Utilise des requ√™tes HTTP pour communiquer avec l'API.
D√©pendances Front	@nuxt/ui et Tailwind CSS	Assure un d√©veloppement rapide, des composants r√©actifs et un design responsive sans √©crire trop de CSS manuel.
√âtat Front	Pinia	Gestion de l'√©tat global (statut de scraping, liste des citations) de mani√®re simple et r√©active.

Exporter vers Sheets
üõ†Ô∏è Directives d'Installation et de Lancement (Local)
Pour lancer le projet en local, il est imp√©ratif de d√©marrer le Backend avant le Frontend, car l'API du Backend est une d√©pendance critique du Frontend.

Phase A : Installation du Backend (Dossier backend)
Pr√©requis : Assurez-vous d'avoir Python (3.10 ou sup√©rieur) et l'outil pip install√©s.

Cr√©ation de l'Environnement Virtuel (Venv)

Bash

# Cr√©e un environnement isol√©
python -m venv venv 
# Active l'environnement virtuel
.\venv\Scripts\activate 
Raison : Cette isolation garantit que les d√©pendances Python du projet ne contaminent pas les autres projets ou l'installation globale de Python.

Installation des D√©pendances Python

Bash

pip install -r requirements.txt
Raison : Installe FastAPI, Uvicorn, Playwright, et tout autre outil de gestion de la BD ou de scraping.

Configuration des Variables d'Environnement

Assurez-vous qu'un fichier .env est pr√©sent √† la racine du dossier backend.

Ce fichier doit contenir au minimum les cl√©s de connexion √† Supabase (ou √† votre BD), ainsi que l'h√¥te et le port de l'API (ex: API_HOST=0.0.0.0, API_PORT=8000).

Raison : S√©parer la configuration du code source (principes 12-Factor App).

Lancement du Serveur Backend

Bash

uvicorn main:app --reload --host 0.0.0.0 --port 8000
Raison : Le flag --reload permet de red√©marrer automatiquement le serveur d√®s qu'une modification est apport√©e √† un fichier Python, acc√©l√©rant le d√©veloppement.

Phase B : Installation du Frontend (Dossier frontend)
Pr√©requis : Assurez-vous d'avoir Node.js (LTS) et l'outil npm install√©s.

Installation des D√©pendances Node

Bash

# S'assurer que nous sommes dans le dossier frontend
cd ..\frontend 
npm install

Nettoyage du Cache Interne (Directive de Stabilit√©)




Bash

npm run dev
Raison : Lance l'application en mode d√©veloppement (Vite + HMR) et la rend accessible (probablement sur http://localhost:3000 ou 3001).